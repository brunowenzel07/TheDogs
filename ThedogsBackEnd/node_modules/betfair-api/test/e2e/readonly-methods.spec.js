var _ = require('lodash');

require('jasmine-before-all');
jasmine.getEnv().defaultTimeoutInterval = 30000;

var api = require('../../index');

describe('Readonly Methods', function() {

  var activeMarketId;
  var marketIds;

  describe('listCompetitions', function() {
    var error, models;

    beforeAll(function(done) {
      var params = {
        filter:{}
      };
      api.listCompetitions(params, function(err, res) {
        error = err;
        models = res;
        done();
      });
    });

    it('should retrieve competitions', function (done) {
      expect(error).toBeNull();
      expect(models).toBeDefined();
      expect(models.length).toBeGreaterThan(0);
      var first = models[0];
      expect(first.competition).toBeDefined();
      done();
    });
  });

  describe('listCountries', function() {
    var error, models;

    beforeAll(function(done) {
      var params = {
        filter:{}
      };
      api.listCountries(params, function(err, res) {
        error = err;
        models = res;
        done();
      });
    });

    it('should retrieve countries', function (done) {
      expect(error).toBeNull();
      expect(models).toBeDefined();
      expect(models.length).toBeGreaterThan(0);
      done();
    });

    it('should retrieve GB', function (done) {
      var gb = _.find(models, function(model) {
        return model.countryCode === 'GB';
      })
      expect(gb).toBeDefined();
      expect(gb.marketCount).toBeGreaterThan(0);
      done();
    });
  });

  // results may vary as it depends upon account in use.
  describe('listCurrentOrders', function() {
    var error, models;

    beforeAll(function(done) {
      var params = {
        filter:{}
      };
      api.listCurrentOrders(params, function(err, res) {
        error = err;
        models = res;
        done();
      });
    });

    it('should retrieve current orders', function (done) {
      expect(error).toBeNull();
      expect(models).toBeDefined();
      done();
    });
  });

  // results may vary as it depends upon account in use.
  describe('listClearedOrders', function() {
    var error, resp;

    beforeAll(function(done) {
      var params = {
        betStatus: 'SETTLED'
      };
      api.listClearedOrders(params, function(err, res) {
        error = err;
        resp = res;
        done();
      });
    });

    it('should retrieve cleared orders', function (done) {
      expect(error).toBeNull();
      expect(resp).toBeDefined();
      expect(resp.clearedOrders).toBeDefined();
      var models = resp.clearedOrders;
      expect(models.length).toBeGreaterThan(0);
      var first = models[0];
      expect(first.marketId).toBeDefined();
      done();
    });
  });

  describe('listEvents', function() {
    var error, models;

    beforeAll(function(done) {
      var params = {
        filter: { eventTypeIds: [ '2' ] }
      };
      api.listEvents(params, function(err, res) {
        error = err;
        models = res;
        done();
      });
    });

    it('should retrieve events', function (done) {
      expect(error).toBeNull();
      expect(models).toBeDefined();
      expect(models.length).toBeGreaterThan(0);
      var first = models[0];
      expect(first.event).toBeDefined();
      done();
    });
  });

  describe('listEventTypes', function() {
    var error, models;
    beforeAll(function(done) {
      var params = {
        filter: {}
      };

      api.listEventTypes(params, function(err, res) {
        error = err;
        models = res;
        done();
      });

    });
    it('should retrieve event types', function(done) {
      expect(error).toBeNull();
      expect(models).toBeDefined();
      done();
    });
    it('should retrieve Soccer', function(done) {
      var soccer = _.find(models, function(model) {
        return model.eventType.name === 'Soccer';
      });
      expect(soccer).toBeDefined();
      done();
    });
  });

  describe('listMarketCatalogue', function() {
    var error, resp;

    var filter = { eventTypeIds: [ 2 ], marketTypeCodes: [ 'MATCH_ODDS' ] };
    var projection = [ 'EVENT', 'EVENT_TYPE', 'COMPETITION', 'MARKET_START_TIME' ];

    beforeAll(function(done) {
      var params = {
        filter: filter,
        marketProjection: projection,
        maxResults: 1000
      };
      api.listMarketCatalogue(params, function(err, res) {
        error = err;
        resp = res;
        done();
      });
    });

    it('should retrieve one or more market catalogues', function (done) {
      expect(error).toBeNull();
      expect(resp).toBeDefined();
      done();
    });

    it('should have a valid market', function (done) {
      var first = resp[0];
      expect(first.marketId).toBeDefined();
      activeMarketId = first.marketId;
      marketIds = _.first(_.pluck(resp, 'marketId'), 8);
      done();
    });
  });

  describe('listMarketBook', function() {
    var error, resp;

    beforeAll(function(done) {
      var params = {
        marketIds: [ activeMarketId ],
        matchProjection: 'NO_ROLLUP',
        priceProjection: {
          priceData: [ 'EX_ALL_OFFERS', 'EX_TRADED' ]
        }
      };
      api.listMarketBook(params, function(err, res) {
        error = err;
        resp = res;
        done();
      });
    });

    it('should retrieve Market Books', function (done) {
      expect(error).toBeNull();
      expect(resp).toBeDefined();
      expect(resp.length).toEqual(1);
      done();
    });

    it('should retrieve a valid market', function (done) {
      var model = resp[0];
      expect(model.marketId).toEqual(activeMarketId);
      expect(model.status).toBeDefined();
      done();
    });
  });

  describe('listMarketBook (multiple Markets)', function() {
    var error, resp;
    beforeAll(function(done) {
      var params = {
        marketIds: marketIds,
        matchProjection: 'NO_ROLLUP',
        priceProjection: {
          priceData: [ 'EX_ALL_OFFERS', 'EX_TRADED' ]
        }
      };
      console.log('Testing using the following marketIds: ' + marketIds);
      api.listMarketBook(params, function(err, res) {
        error = err;
        resp = res;
        done();
      });
    });

    it('should retrieve a known number of Market Books', function (done) {
      expect(error).toBeNull();
      expect(resp).toBeDefined();
      expect(resp.length).toEqual(marketIds.length);
      done();
    });
  });

});
